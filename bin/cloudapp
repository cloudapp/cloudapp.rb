#!/usr/bin/env ruby
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'rubygems'
require 'gli'
require 'highline'
require 'pathname'

require 'cloudapp'
require 'cloudapp/config'
require 'cloudapp/drop_presenter'
require 'cloudapp/drop_service'


extend Forwardable
def_delegator 'HighLine.new', :color

def config
  CloudApp::Config.new
end

def service
  CloudApp::DropService.using_token config.token
end

def require_credentials
  return unless config.token.nil?

  $stdout.puts 'Sign into your CloudApp account.'

  email        = HighLine.new.ask('Email: ')
  password     = HighLine.new.ask('Password: ') {|q| q.echo = false }
  config.token = CloudApp::DropService.retrieve_token email, password
end

def format_from_options(options)
  if options[:format].nil?
    $stdout.tty? ? :pretty : :csv
  else
    options[:format].to_sym
  end
end

def privacy_from_options(options)
  if options[:private] || options[:public]
    options[:private] || !options[:public]
  end
end

def create_drop_action_on_command(c)
  c.desc 'Use a private (long) link'
  c.switch :private

  c.desc 'Use a public (short) link'
  c.switch :public

  c.action do |global_options, options, args|
    require_credentials
    format  = format_from_options global_options
    private = privacy_from_options options

    yield format, private, args
  end
end


include GLI

program_desc 'All the pleasures of CloudApp now at your terminal'
version CloudApp::VERSION

desc 'Output format (default: pretty for tty, csv otherwise)'
arg_name 'csv|pretty'
flag [:f, :format]

desc 'Create a new bookmark to each url and print each link'
arg_name 'url [url...]'
command :bookmark do |c|
  create_drop_action_on_command(c) do |format, private, urls|
    urls.each do |url|
      url     = URI.parse url
      waiting = "Bookmarking #{ url }... "

      CloudApp::DropPresenter.print(on:      $stdout,
                                    waiting: waiting,
                                    format:  format) do
        new_options = { url: url }
        new_options[:private] = private unless private.nil?

        new_drop = service.create new_options
        new_drop.url
      end
    end
  end
end

desc 'Upload each file and print each link'
arg_name 'file [file...]'
command :upload do |c|
  create_drop_action_on_command(c) do |format, private, files|
    files.each do |file|
      file    = Pathname.new file
      waiting = "Uploading #{ file }... "

      CloudApp::DropPresenter.print(on:      $stdout,
                                    waiting: waiting,
                                    format:  format) do
        new_options = { path: file }
        new_options[:private] = private unless private.nil?

        new_drop = service.create new_options
        new_drop.url
      end
    end
  end
end

desc 'List the most recent drops'
command [:list, :ls] do |c|

  c.desc 'Number of drops to display'
  c.arg_name 'count'
  c.default_value '20'
  c.flag :n, :count

  c.action do |global_options, options, args|
    require_credentials

    count   = options[:count].to_i
    columns = { display_name: 'Name', url: 'Link', view_counter: 'Views' }
    format  = format_from_options global_options

    CloudApp::DropPresenter.print(on:      $stdout,
                                  columns: columns,
                                  format:  format) do
      service.drops count
    end
  end
end


desc 'Download the drop at <url>'
arg_name 'url'
command :download do |c|

  c.desc 'Download the file to <file>'
  c.arg_name 'file'
  c.flag :o, :output

  c.action do |global_options, options, urls|
    format  = format_from_options global_options
    download_options = {}
    download_options[:to] = options[:output] if options[:output]

    urls.each do |url|
      url     = URI.parse url
      waiting = "Downloading #{ url }... "

      CloudApp::DropPresenter.print(on:      $stdout,
                                    waiting: waiting,
                                    format:  format) do
        content = service.download_drop url, download_options
        { pretty: 'done', csv: content }
      end
    end
  end
end


on_error do |e|
  case e
  when CloudApp::DropService::UNAUTHORIZED
    $stderr.puts color('Email and password given are incorrect.', :bold)
    config.token = nil
    false
  when CloudApp::DropService::NO_CONTENT
    $stderr.puts 'drop was deleted or is a bookmark'
    false
  else
    true
  end
end

exit GLI.run(ARGV)
