#!/usr/bin/env ruby

require "cloudapp"
require "cloudapp/credentials"
require "cloudapp/cli/options"
require "cloudapp/cli/prompt"
require "cloudapp/cli/collections_prompt"
require "cloudapp/service"
require "clipboard"

trap("SIGINT") do
  puts
  exit
end

def service
  CloudApp::Service.using_token(token)
    .on_error(&method(:service_error_handler))
end

def token_for_account(email, password)
  CloudApp::Service
    .token_for_account(email, password, &method(:service_error_handler))
end

def service_error_handler(representation)
  if representation.collection.error
    message = representation.collection.error.message
    if representation.collection.error.code == "upgrade"
      message << " "
      message << representation.link("upgrade").href
    end
    service_error message
  end
end

def token
  Credentials.token
end

def valid_token?
  !token.nil? and service.root.authorized?
end

def authenticate
  while not valid_token?
    email, password = CloudApp::CLI::Prompt.new.ask_for_credentials
    token = token_for_account email, password
    Credentials.save email, token
  end
end

def fetch_link(drop, options)
  link_rel = options.direct_link? ? :embed : :canonical
  link = drop.link(link_rel) || drop.link(:canonical)
  copy link if options.copy_link?
  $stdout.puts link
  $stderr.puts link unless $stdout.tty?
end

def print_error(message)
  $stderr.puts "! #{wrap(message, 78, "  ")}"
end

def service_error(message)
  $stderr.puts
  $stderr.puts
  print_error message
  $stderr.puts
end

def error(message)
  print_error message
  exit 1
end

def wrap(message, width, padding)
  message.gsub(/(.{1,#{width}})(\s+|$)/, "\\1\n#{padding}").strip
end

def print_version
  $stdout.puts CloudApp::VERSION
  exit
end

def print_help(io = $stdout)
  io.puts <<EOS
cloudapp, version #{CloudApp::VERSION}

Usage:
    cloudapp [--direct] [--[no-]copy] <file_or_url>...

Options:
    -d, --direct
           Print  the drop's direct link after creation. The direct link is
           suitable for use in places that expect a link to a file like an
           HTML IMG tag.

    -h, --help
           Print this help message.

    --[no-]copy
           Copy the new drop's link to the system clipboard. The default
           option is copy.

    --version
           Display the version of cloudapp.
    
    --collections
           Display collections options

EOS
end

def copy(content)
  Clipboard.copy content
end

def invalid_command
  print_help $stderr
  exit 1
end

def file_names(options, input = $stdin)
  stdin_file_names = input.tty? ? [] : input.each_line.map(&:chomp)
  stdin_file_names + options.arguments
end

def share(file_names, options)
  invalid_command if file_names.empty?
  authenticate

  file_names.each do |arg|
    if File.exists? arg
      $stderr.print "Uploading #{File.basename(arg)}... "
      drop = service.upload(arg)
    elsif arg =~ URI.regexp
      $stderr.print "Bookmarking #{arg}... "
      drop = service.bookmark(arg)
    else
      error "#{arg.inspect} isn't a file that exists or a valid URL."
    end

    exit 1 unless drop
    fetch_link drop, options
  end
end

options = CloudApp::CLI::Options.parse ARGV
case options.action
when :help then print_help
when :version then print_version
when :share then share file_names(options), options
when :collections
  authenticate
  CloudApp::CLI::CollectionsPrompt.parse_options options
end
